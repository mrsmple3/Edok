generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id                   Int                  @id @default(autoincrement())
  email                String?              @unique
  phone                String?              @unique
  password_hash        String
  role                 String // Роль: "admin", "moderator", "counterparty"
  isActive             Boolean?             @default(false)
  name                 String?
  surname              String?
  patronymic           String?
  organization_name    String?
  organization_INN     String?
  company_type         String?
  RefreshToken         RefreshToken[]
  Document             Document[]
  DocumentCounterparty Document[]           @relation("DocumentCounterparty")
  Signature            Signature[]
  MessageSender        Message[]            @relation("Sender")
  LeadAuthor           Lead[]               @relation("LeadAuthor")
  LeadModerator        Lead[]               @relation("LeadModerator")
  LeadCounterparty     Lead[]               @relation("LeadCounterparty")
  DocumentDeleteSign   DocumentDeleteSign[]
  createdAt            DateTime             @default(now())
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("refresh_token")
}

model Document {
  id              Int                  @id @default(autoincrement())
  title           String?
  content         String?
  filePath        String?
  type            String // Тип: "contract", "invoice", "act"
  status          String
  deleteSignCount Int                  @default(0)
  userId          Int
  user            User                 @relation(fields: [userId], references: [id])
  counterpartyId  Int?
  counterparty    User?                @relation("DocumentCounterparty", fields: [counterpartyId], references: [id])
  leadId          Int?
  lead            Lead?                @relation(fields: [leadId], references: [id])
  Signature       Signature[]
  createdAt       DateTime             @default(now())
  deleteSigns     DocumentDeleteSign[] // Связь с таблицей DocumentDeleteSign

  @@index([leadId])
  @@index([userId])
  @@index([counterpartyId])
}

model DocumentDeleteSign {
  id         Int      @id @default(autoincrement())
  documentId Int
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([documentId, userId])
  @@index([documentId])
  @@index([userId])
}

model Lead {
  id             Int        @id @default(autoincrement())
  name           String?
  type           String
  status         String     @default("Информационный")
  moderatorsId   Int?
  moderators     User?      @relation("LeadModerator", fields: [moderatorsId], references: [id])
  counterpartyId Int?
  counterparty   User?      @relation("LeadCounterparty", fields: [counterpartyId], references: [id])
  authorId       Int
  author         User       @relation("LeadAuthor", fields: [authorId], references: [id])
  documents      Document[]
  createdAt      DateTime   @default(now())

  @@index([authorId])
  @@index([moderatorsId])
  @@index([counterpartyId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  room      String
  sender    User     @relation("Sender", fields: [senderId], references: [id])
  createdAt DateTime @default(now())
  userId    Int?

  @@index([senderId])
}

model Signature {
  id         Int      @id @default(autoincrement())
  signature  String
  documentId Int
  document   Document @relation(fields: [documentId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@index([documentId])
  @@index([userId])
}
